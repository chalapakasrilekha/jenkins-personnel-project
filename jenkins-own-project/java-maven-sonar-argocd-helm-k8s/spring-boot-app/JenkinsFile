pipeline {
    agent {
        docker {
            image 'srilkeha79953/myjavaapp:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket
        }
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                // git branch: 'main', url: 'https://github.com/chalapakasrilekha/jenkins-personnel-project.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd jenkins-own-project/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://54.209.27.215:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd jenkins-own-project/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "srilkeha79953/my-cicd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                        cd jenkins-own-project/java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "jenkins-personnel-project"
                GIT_USER_NAME = "chalapaka srilekha"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        cd /home
                        git clone https://github.com/chalapakasrilekha/jenkins-personnel-project.git
                        cd jenkins-personnel-project/
                        git config user.email "chalapakasrilekha@gmail.com"
                        git config user.name "chalapakasrilekha"
                        
                        # Update the deployment file
                        sed -i "s|\\(image: your-docker-image-name:\\).*|\\1${BUILD_NUMBER}|" jenkins-own-project/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml     
                        git add jenkins-own-project/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        
                        # Push changes
                        git push https://${GITHUB_TOKEN}@github.com/chalapakasrilekha/jenkins-personnel-project.git HEAD:main
                    '''
                }
            }
        }
    }
}
